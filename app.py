import streamlit as st
import time
from rag_system import BangladeshLegalRAGSystem
from config import Config
import pandas as pd
from datetime import datetime
import os

# Page configuration
st.set_page_config(
    page_title="ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржЖржЗржирж┐ рж╕рж╣рж╛ржпрж╝ржХ - Legal Assistant",
    page_icon="тЪЦя╕П",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for Bengali fonts and styling
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Bengali:wght@300;400;500;600;700&display=swap');
    
    .main {
        font-family: 'Noto Sans Bengali', sans-serif;
    }
    
    .stTitle {
        font-family: 'Noto Sans Bengali', sans-serif;
        color: #1f4e79;
        text-align: center;
        border-bottom: 3px solid #1f4e79;
        padding-bottom: 10px;
    }
    
    .legal-advice-box {
        background-color: #f8f9fa;
        border-left: 5px solid #28a745;
        padding: 20px;
        margin: 10px 0;
        border-radius: 5px;
    }
    
    .warning-box {
        background-color: #fff3cd;
        border-left: 5px solid #ffc107;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
    
    .error-box {
        background-color: #f8d7da;
        border-left: 5px solid #dc3545;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
    
    .sidebar .sidebar-content {
        font-family: 'Noto Sans Bengali', sans-serif;
    }
    
    .chat-message {
        padding: 10px;
        margin: 5px 0;
        border-radius: 10px;
    }
    
    .user-message {
        background-color: #e3f2fd;
        margin-left: 20px;
    }
    
    .assistant-message {
        background-color: #f1f8e9;
        margin-right: 20px;
        color: #1a1a1a;
    }
    
    .legal-advice-box {
        color: #1a1a1a !important;
    }
    
    .legal-advice-box h4 {
        color: #1f4e79 !important;
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'rag_system' not in st.session_state:
    st.session_state.rag_system = None
    st.session_state.system_initialized = False

if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

if 'api_key' not in st.session_state:
    st.session_state.api_key = ""

# Helper functions
def initialize_system(api_key=None):
    """Initialize the RAG system"""
    try:
        with st.spinner('рж╕рж┐рж╕рзНржЯрзЗржо ржкрзНрж░рж╕рзНрждрзБржд ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... ржПржЯрж┐ ржкрзНрж░ржержоржмрж╛рж░ ржХржпрж╝рзЗржХ ржорж┐ржирж┐ржЯ рж╕ржоржпрж╝ ржирж┐рждрзЗ ржкрж╛рж░рзЗред'):
            st.session_state.rag_system = BangladeshLegalRAGSystem(api_key=api_key)
            success = st.session_state.rag_system.initialize_system()
            st.session_state.system_initialized = success
            return success
    except Exception as e:
        st.error(f"рж╕рж┐рж╕рзНржЯрзЗржо ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржирзЗ рж╕ржорж╕рзНржпрж╛: {str(e)}")
        return False

def display_chat_message(message, is_user=True):
    """Display a chat message"""
    css_class = "user-message" if is_user else "assistant-message"
    icon = "ЁЯСитАНЁЯТ╝" if is_user else "тЪЦя╕П"
    
    st.markdown(f"""
    <div class="chat-message {css_class}">
        <strong>{icon} {'ржЖржЗржиржЬрзАржмрзА' if is_user else 'ржЖржЗржирж┐ рж╕рж╣рж╛ржпрж╝ржХ'}:</strong><br>
        {message}
    </div>
    """, unsafe_allow_html=True)

def main():
    """Main application"""
    
    # Header
    st.markdown("""
    <h1 class="stTitle">тЪЦя╕П ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржЖржЗржирж┐ рж╕рж╣рж╛ржпрж╝ржХ</h1>
    <h3 style="text-align: center; color: #666; font-family: 'Noto Sans Bengali', sans-serif;">
    Legal Assistant for Bangladesh - Powered by AI
    </h3>
    """, unsafe_allow_html=True)
    
    # Sidebar for configuration and controls
    with st.sidebar:
        st.markdown("### тЪЩя╕П рж╕рзЗржЯрж┐ржВрж╕")
        
        # Auto-initialize system if not already done
        if not st.session_state.system_initialized:
            if st.button("ЁЯЪА рж╕рж┐рж╕рзНржЯрзЗржо ржЪрж╛рж▓рзБ ржХрж░рзБржи", key="init_system"):
                if initialize_system():
                    st.success("тЬЕ рж╕рж┐рж╕рзНржЯрзЗржо рж╕ржлрж▓ржнрж╛ржмрзЗ ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗ!")
                    st.rerun()
                else:
                    st.error("тЭМ рж╕рж┐рж╕рзНржЯрзЗржо ржЪрж╛рж▓рзБ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ")
        
        # System status
        st.markdown("### ЁЯУК рж╕рж┐рж╕рзНржЯрзЗржо рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕")
        if st.session_state.system_initialized and st.session_state.rag_system:
            status = st.session_state.rag_system.get_system_status()
            
            if status["system_initialized"]:
                st.success("тЬЕ рж╕рж┐рж╕рзНржЯрзЗржо ржкрзНрж░рж╕рзНрждрзБржд")
                
                # Document information
                docs = status["documents_available"]
                if docs:
                    st.markdown("**ЁЯУЪ ржЙржкрж▓ржмрзНржз ржиржерж┐:**")
                    for doc, count in docs.items():
                        st.write(f"тАв {doc}: {count} ржЕржВрж╢")
                
                st.info(f"ЁЯФН {status['vector_db_status']}")
                
                # Gemini status
                if "API рж╕ржлрж▓ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗ" in status["gemini_status"]:
                    st.success(f"ЁЯдЦ {status['gemini_status']}")
                else:
                    st.warning(f"ЁЯдЦ {status['gemini_status']}")
            else:
                st.error("тЭМ рж╕рж┐рж╕рзНржЯрзЗржо ржкрзНрж░рж╕рзНрждрзБржд ржиржпрж╝")
        else:
            st.warning("тЪая╕П рж╕рж┐рж╕рзНржЯрзЗржо ржПржЦржирзЛ ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣ржпрж╝ржирж┐")
        
        # Clear chat button
        if st.button("ЁЯЧСя╕П ржЪрзНржпрж╛ржЯ ржХрзНрж▓рж┐ржпрж╝рж╛рж░ ржХрж░рзБржи"):
            st.session_state.chat_history = []
            st.rerun()
        
        # Help section
        with st.expander("ЁЯУЦ рж╕рж╣рж╛ржпрж╝рждрж╛"):
            st.markdown("""
            **ржХрж┐ржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи:**
            
            1. **рж╕рж┐рж╕рзНржЯрзЗржо ржЪрж╛рж▓рзБ ржХрж░рзБржи**: 'рж╕рж┐рж╕рзНржЯрзЗржо ржЪрж╛рж▓рзБ ржХрж░рзБржи' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи
            
            2. **ржкрзНрж░рж╢рзНржи ржХрж░рзБржи**: ржирж┐ржЪрзЗрж░ ржЯрзЗржХрзНрж╕ржЯ ржмржХрзНрж╕рзЗ ржЖржкржирж╛рж░ ржЖржЗржирж┐ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи
            
            **ржкрзНрж░рж╢рзНржирзЗрж░ ржЙржжрж╛рж╣рж░ржг:**
            - ржирж╛рж░рзА ржирж┐рж░рзНржпрж╛рждржи ржорж╛ржорж▓рж╛ржпрж╝ ржЬрж╛ржорж┐ржирзЗрж░ ржирж┐ржпрж╝ржо ржХрж┐?
            - ржЬржорж┐ ржжржЦрж▓ ржорж╛ржорж▓рж╛ ржХрж┐ржнрж╛ржмрзЗ ржХрж░ржмрзЛ?
            - ржЖржЗржирж┐ ржирзЛржЯрж┐рж╢ ржХрж┐ржнрж╛ржмрзЗ ржжрж┐рждрзЗ рж╣ржпрж╝?
            """)
    
    # Main content area
    if not st.session_state.system_initialized:
        st.markdown("""
        <div class="warning-box">
            <h3>ЁЯФз рж╕рж┐рж╕рзНржЯрзЗржо рж╕рзЗржЯржЖржк ржкрзНрж░ржпрж╝рзЛржЬржи</h3>
            <p>ржЖржЗржирж┐ рж╕рж╣рж╛ржпрж╝ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрзНрж░ржержорзЗ рж╕рж╛ржЗржбржмрж╛рж░ ржерзЗржХрзЗ 'рж╕рж┐рж╕рзНржЯрзЗржо ржЪрж╛рж▓рзБ ржХрж░рзБржи' ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред</p>
            <p>ржкрзНрж░ржержоржмрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рждрзЗ ржХржпрж╝рзЗржХ ржорж┐ржирж┐ржЯ рж╕ржоржпрж╝ рж▓рж╛ржЧрждрзЗ ржкрж╛рж░рзЗ ржХрж╛рж░ржг рж╕рж┐рж╕рзНржЯрзЗржо рж╕ржм ржЖржЗржирж┐ ржиржерж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░ржмрзЗред</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Tabs for different features
    tab1, tab2, tab3, tab4 = st.tabs([
        "ЁЯТм ржЖржЗржирж┐ ржкрж░рж╛ржорж░рзНрж╢", 
        "ЁЯУД ржбржХрзБржорзЗржирзНржЯ рждрзИрж░рж┐", 
        "ЁЯФН ржиржерж┐ ржЦрзЛржБржЬ", 
        "ЁЯУК ржорж╛ржорж▓рж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг"
    ])
    
    with tab1:
        st.markdown("### ЁЯТм ржЖржЗржирж┐ ржкрж░рж╛ржорж░рзНрж╢ ржЪрж╛ржи")
        
        # Display chat history
        if st.session_state.chat_history:
            st.markdown("**ржЖржЧрзЗрж░ ржХржерзЛржкржХржержи:**")
            for entry in st.session_state.chat_history:
                display_chat_message(entry["query"], is_user=True)
                display_chat_message(entry["response"], is_user=False)
                st.markdown("---")
        
        # Input form
        with st.form("legal_advice_form"):
            user_query = st.text_area(
                "ржЖржкржирж╛рж░ ржЖржЗржирж┐ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи:",
                height=100,
                placeholder="ржЙржжрж╛рж╣рж░ржг: ржПржХржЬржи рждрж╛рж░ рж╕рзНрждрзНрж░рзАрж░ ржжрзЗржпрж╝рж╛ ржорж┐ржерзНржпрж╛ ржирж╛рж░рзА ржирж┐рж░рзНржпрж╛рждржи ржорж╛ржорж▓рж╛рж░ рж╕ржорзНржорзБржЦрзАржиред ржЖржорж┐ ржПржХржЬржи ржПржбржнрзЛржХрзЗржЯ рж╣рж┐рж╕рж╛ржмрзЗ ржХрж┐ржнрж╛ржмрзЗ рждрж╛рж░ ржорж╛ржорж▓рж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░ржмрзЛ?"
            )
            
            col1, col2 = st.columns([1, 4])
            with col1:
                submit_button = st.form_submit_button("ЁЯУд ржкрзНрж░рж╢рзНржи ржХрж░рзБржи")
            with col2:
                use_context = st.checkbox("ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржиржерж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи", value=True)
        
        if submit_button and user_query.strip():
            with st.spinner('ржЖржЗржирж┐ ржкрж░рж╛ржорж░рзНрж╢ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...'):
                result = st.session_state.rag_system.get_legal_advice(user_query, use_context)
                
                if result["success"]:
                    # Display the advice
                    st.markdown(f"""
                    <div class="legal-advice-box">
                        <h4>тЪЦя╕П ржЖржЗржирж┐ ржкрж░рж╛ржорж░рзНрж╢:</h4>
                        {result["advice"].replace('\n', '<br>')}
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Show sources if available
                    if result["sources"]:
                        st.markdown("**ЁЯУЪ ржмрзНржпржмрж╣рзГржд рж╕рзВрждрзНрж░:**")
                        for source in set(result["sources"]):
                            st.write(f"тАв {source}")
                    
                    # Save to chat history
                    st.session_state.chat_history.append({
                        "query": user_query,
                        "response": result["advice"],
                        "timestamp": datetime.now()
                    })
                    
                else:
                    st.markdown(f"""
                    <div class="error-box">
                        <h4>тЭМ рждрзНрж░рзБржЯрж┐:</h4>
                        {result["error"]}
                    </div>
                    """, unsafe_allow_html=True)
    
    with tab2:
        st.markdown("### ЁЯУД ржЖржЗржирж┐ ржбржХрзБржорзЗржирзНржЯ рждрзИрж░рж┐")
        
        document_type = st.selectbox(
            "ржбржХрзБржорзЗржирзНржЯрзЗрж░ ржзрж░ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
            ["Legal Notice", "Petition", "Other"]
        )
        
        if document_type == "Legal Notice":
            st.markdown("**ржЖржЗржирж┐ ржирзЛржЯрж┐рж╢рзЗрж░ рждржерзНржп ржжрж┐ржи:**")
            
            with st.form("legal_notice_form"):
                client_name = st.text_input("ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯрзЗрж░ ржирж╛ржо:")
                respondent_name = st.text_input("ржкрзНрж░рждрж┐ржкржХрзНрж╖рзЗрж░ ржирж╛ржо:")
                case_details = st.text_area("ржорж╛ржорж▓рж╛рж░ ржмрж┐ржмрж░ржг:", height=150)
                demands = st.text_area("ржжрж╛ржмрж┐ рж╕ржорзВрж╣:", height=100)
                time_limit = st.selectbox("рж╕ржоржпрж╝рж╕рзАржорж╛:", ["15 ржжрж┐ржи", "30 ржжрж┐ржи", "ржЕржирзНржпрж╛ржирзНржп"])
                
                if st.form_submit_button("ЁЯУД ржирзЛржЯрж┐рж╢ рждрзИрж░рж┐ ржХрж░рзБржи"):
                    details = {
                        "client_name": client_name,
                        "respondent_name": respondent_name,
                        "case_details": case_details,
                        "demands": demands,
                        "time_limit": time_limit
                    }
                    
                    with st.spinner('ржЖржЗржирж┐ ржирзЛржЯрж┐рж╢ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...'):
                        result = st.session_state.rag_system.generate_legal_document("legal_notice", details)
                        
                        if result["success"]:
                            st.markdown("### ЁЯУД рждрзИрж░рж┐ржХрзГржд ржЖржЗржирж┐ ржирзЛржЯрж┐рж╢:")
                            st.text_area("", value=result["document"], height=400)
                        else:
                            st.error(result["error"])
    
    with tab3:
        st.markdown("### ЁЯФН ржиржерж┐ ржЕржирзБрж╕ржирзНржзрж╛ржи")
        
        search_query = st.text_input(
            "ржЦрзБржБржЬрждрзЗ ржЪрж╛ржи:",
            placeholder="ржЙржжрж╛рж╣рж░ржг: рж╕ржВржмрж┐ржзрж╛ржи ржирж╛ржЧрж░рж┐ржХ ржЕржзрж┐ржХрж╛рж░"
        )
        
        available_docs = st.session_state.rag_system.get_available_documents()
        doc_filter = st.selectbox(
            "ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржиржерж┐ (ржРржЪрзНржЫрж┐ржХ):",
            ["рж╕ржм ржиржерж┐"] + list(available_docs.keys())
        )
        
        if st.button("ЁЯФН ржЦрзБржБржЬрзБржи") and search_query:
            doc_name = None if doc_filter == "рж╕ржм ржиржерж┐" else doc_filter
            
            with st.spinner('ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...'):
                results = st.session_state.rag_system.search_documents(search_query, doc_name)
                
                if results:
                    st.markdown(f"**ЁЯУЛ {len(results)}ржЯрж┐ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ:**")
                    
                    for i, result in enumerate(results, 1):
                        with st.expander(f"ржлрж▓рж╛ржлрж▓ {i}: {result['document']} (рж╕рзНржХрзЛрж░: {result['score']:.3f})"):
                            st.write(result['text'])
                else:
                    st.warning("ржХрзЛржирзЛ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
    
    with tab4:
        st.markdown("### ЁЯУК ржорж╛ржорж▓рж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг")
        
        with st.form("case_analysis_form"):
            case_details = st.text_area(
                "ржорж╛ржорж▓рж╛рж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐ржмрж░ржг ржжрж┐ржи:",
                height=200,
                placeholder="ржорж╛ржорж▓рж╛рж░ ржзрж░ржи, ржШржЯржирж╛рж░ ржмрж┐ржмрж░ржг, ржкрзНрж░ржорж╛ржг, рж╕рж╛ржХрзНрж╖рзА ржЗрждрзНржпрж╛ржжрж┐ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рж▓рж┐ржЦрзБржи..."
            )
            
            if st.form_submit_button("ЁЯУК ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи"):
                if case_details.strip():
                    with st.spinner('ржорж╛ржорж▓рж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...'):
                        result = st.session_state.rag_system.analyze_case(case_details)
                        
                        if result["success"]:
                            st.markdown("### ЁЯУК ржорж╛ржорж▓рж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:")
                            st.markdown(f"""
                            <div class="legal-advice-box">
                                {result["analysis"].replace('\n', '<br>')}
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.error(result["error"])
                else:
                    st.warning("ржорж╛ржорж▓рж╛рж░ ржмрж┐ржмрж░ржг ржжрж┐ржиред")

if __name__ == "__main__":
    main() 