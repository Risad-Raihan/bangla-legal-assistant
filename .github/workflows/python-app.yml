name: Bangladesh Legal Assistant CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports and basic functionality
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        python -c "import config; print('Config loaded successfully')"
        python -c "import pdf_processor; print('PDF processor loaded')"
        python -c "import vector_database; print('Vector database loaded')"
        python -c "import gemini_client; print('Gemini client loaded')"
    
    - name: Test PDF processing
      run: |
        python -c "
        from pdf_processor import LegalPDFProcessor
        processor = LegalPDFProcessor()
        print('PDF processor initialized successfully')
        "
    
    - name: Check data directory
      run: |
        if [ -d "data" ]; then
          echo "Data directory exists"
          ls -la data/
        else
          echo "Data directory not found - creating mock data for testing"
          mkdir -p data
          echo "Mock PDF content" > data/test.txt
        fi

  build-and-test-app:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test Streamlit app syntax
      run: |
        python -m py_compile app.py
        echo "Streamlit app compiled successfully"
    
    - name: Create mock environment for testing
      run: |
        echo "GOOGLE_API_KEY=test_key_for_ci" > .env
        mkdir -p data logs temp vector_db
    
    - name: Test app initialization (dry run)
      env:
        GOOGLE_API_KEY: "test_key_for_ci"
      run: |
        timeout 30s streamlit run app.py --server.headless=true --server.port=8501 || true
        echo "App startup test completed"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        # Check for hardcoded secrets
        if grep -r "AIza" . --exclude-dir=.git --exclude="*.yml" --exclude="*.md"; then
          echo "❌ Found potential hardcoded API keys!"
          exit 1
        else
          echo "✅ No hardcoded API keys found"
        fi
        
        # Check if .env is in gitignore
        if grep -q "\.env" .gitignore; then
          echo "✅ .env file is properly ignored"
        else
          echo "❌ .env file should be in .gitignore"
          exit 1
        fi 